"""
Report generation endpoints
"""

from typing import Optional, List
from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from app.database.database import get_db
from app.database.models import User
from app.api.auth.security import get_current_active_user, require_manager_or_admin
from app.services.report_service import ReportService
import logging

logger = logging.getLogger(__name__)
router = APIRouter()


@router.post("/risk-assessment")
async def generate_risk_assessment_report(
    assessment_type: Optional[str] = Query(None),
    period_days: int = Query(30, ge=1, le=365),
    region: Optional[str] = Query(None),
    format: str = Query("pdf", regex="^(pdf|excel|json)$"),
    current_user: User = Depends(require_manager_or_admin),
    db: Session = Depends(get_db)
):
    """Generate risk assessment report"""
    # Determine region filter
    if current_user.role == "admin" and region:
        filter_region = region
    else:
        filter_region = current_user.region
    
    report_service = ReportService()
    report = await report_service.generate_risk_assessment_report(
        filter_region, assessment_type, period_days, format, current_user, db
    )
    
    logger.info(f"Risk assessment report generated by {current_user.username}")
    return {"message": "Report generation started", "report_id": report["report_id"]}


@router.post("/compliance")
async def generate_compliance_report(
    regulation_type: Optional[str] = Query(None),
    period_days: int = Query(30, ge=1, le=365),
    region: Optional[str] = Query(None),
    format: str = Query("pdf", regex="^(pdf|excel|json)$"),
    current_user: User = Depends(require_manager_or_admin),
    db: Session = Depends(get_db)
):
    """Generate compliance report"""
    # Determine region filter
    if current_user.role == "admin" and region:
        filter_region = region
    else:
        filter_region = current_user.region
    
    report_service = ReportService()
    report = await report_service.generate_compliance_report(
        filter_region, regulation_type, period_days, format, current_user, db
    )
    
    logger.info(f"Compliance report generated by {current_user.username}")
    return {"message": "Report generation started", "report_id": report["report_id"]}


@router.post("/executive-summary")
async def generate_executive_summary(
    period_days: int = Query(30, ge=1, le=365),
    region: Optional[str] = Query(None),
    format: str = Query("pdf", regex="^(pdf|excel|json)$"),
    current_user: User = Depends(require_manager_or_admin),
    db: Session = Depends(get_db)
):
    """Generate executive summary report"""
    # Determine region filter
    if current_user.role == "admin" and region:
        filter_region = region
    else:
        filter_region = current_user.region
    
    report_service = ReportService()
    report = await report_service.generate_executive_summary(
        filter_region, period_days, format, current_user, db
    )
    
    logger.info(f"Executive summary generated by {current_user.username}")
    return {"message": "Report generation started", "report_id": report["report_id"]}


@router.post("/audit-trail")
async def generate_audit_trail_report(
    period_days: int = Query(30, ge=1, le=365),
    user_id: Optional[int] = Query(None),
    action_type: Optional[str] = Query(None),
    format: str = Query("pdf", regex="^(pdf|excel|json)$"),
    current_user: User = Depends(require_manager_or_admin),
    db: Session = Depends(get_db)
):
    """Generate audit trail report"""
    report_service = ReportService()
    report = await report_service.generate_audit_trail_report(
        period_days, user_id, action_type, format, current_user, db
    )
    
    logger.info(f"Audit trail report generated by {current_user.username}")
    return {"message": "Report generation started", "report_id": report["report_id"]}


@router.get("/")
async def get_reports(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    report_type: Optional[str] = Query(None),
    status: Optional[str] = Query(None),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Get list of generated reports"""
    report_service = ReportService()
    reports = await report_service.get_reports(
        skip, limit, report_type, status, current_user, db
    )
    
    return reports


@router.get("/{report_id}")
async def get_report(
    report_id: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Get report details"""
    report_service = ReportService()
    report = await report_service.get_report(report_id, current_user, db)
    
    if not report:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Report not found"
        )
    
    return report


@router.get("/{report_id}/download")
async def download_report(
    report_id: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Download report file"""
    from fastapi.responses import FileResponse
    
    report_service = ReportService()
    file_path = await report_service.get_report_file_path(report_id, current_user, db)
    
    if not file_path:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Report file not found"
        )
    
    import os
    if not os.path.exists(file_path):
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Report file not found on disk"
        )
    
    filename = os.path.basename(file_path)
    return FileResponse(
        path=file_path,
        filename=filename,
        media_type='application/octet-stream'
    )


@router.delete("/{report_id}")
async def delete_report(
    report_id: str,
    current_user: User = Depends(require_manager_or_admin),
    db: Session = Depends(get_db)
):
    """Delete report"""
    report_service = ReportService()
    success = await report_service.delete_report(report_id, current_user, db)
    
    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Report not found"
        )
    
    logger.info(f"Report deleted: {report_id} by {current_user.username}")
    return {"message": "Report deleted successfully"}


@router.post("/schedule")
async def schedule_report(
    report_type: str = Query(...),
    schedule_cron: str = Query(...),
    recipients: List[str] = Query(...),
    region: Optional[str] = Query(None),
    current_user: User = Depends(require_manager_or_admin),
    db: Session = Depends(get_db)
):
    """Schedule recurring report generation"""
    report_service = ReportService()
    schedule = await report_service.schedule_report(
        report_type, schedule_cron, recipients, region, current_user, db
    )
    
    logger.info(f"Report scheduled by {current_user.username}")
    return {"message": "Report scheduled successfully", "schedule_id": schedule["schedule_id"]}